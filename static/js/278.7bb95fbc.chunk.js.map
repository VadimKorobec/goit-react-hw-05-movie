{"version":3,"file":"static/js/278.7bb95fbc.chunk.js","mappings":"0NAGaA,EAAeC,EAAAA,EAAAA,GAAH,iGAMZC,EAAeD,EAAAA,EAAAA,GAAH,6CAIZE,GAAOF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,0IAUJI,EAAMJ,EAAAA,EAAAA,IAAH,iH,6BCjBHK,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACT,EAAD,UACGO,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,OACV,SAACZ,EAAD,WACE,UAACC,EAAD,CAAMY,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMT,GAA1C,WACE,SAACH,EAAD,CAAKa,IAAKL,EAAcM,EAAAA,EAAeN,EAAcO,EACnDC,IAAKT,KACP,yBAAKA,EAAL,IAAaE,EAAaQ,MAAM,EAAG,GAAnC,WAJeX,EADT,KAWjB,C,6FCqBD,UAtCe,WACb,OAA0BY,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOhB,EAAP,KAAemB,EAAf,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcH,EAAaI,IAAI,SAChCD,IAGLE,EAAAA,EAAAA,IAAiBF,GACdG,KAAKR,GACLS,SAAQ,WACPV,EAASM,EACV,GACJ,GAAE,CAACH,IAWJ,OACE,4BACE,kBAAMQ,SAXW,SAAAC,GACnBA,EAAMC,iBAENT,EAAgB,CAAEL,MAAAA,GACnB,EAOG,WACE,kBAAOe,KAAK,OAAOC,KAAK,QAAQC,MAAOjB,EAAOkB,SAN/B,SAAAL,GACnBZ,EAASY,EAAMM,OAAOF,MACvB,KAKK,mBAAQF,KAAK,SAAb,wBAEF,SAAC,IAAD,CAAYhC,OAAQA,MAGzB,C,mMCvCDqC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACZF,EAAAA,EAAAA,IAAA,uBAAkC,CACnDG,OAAQ,CACNC,QAASH,EACTI,KAAM,KAJqB,cACzBC,EADyB,yBAOxBA,EAAKC,KAAKC,SAPc,2CAAH,qDAUjBnB,EAAgB,mCAAG,WAAMT,GAAN,uFACXoB,EAAAA,EAAAA,IAAA,8CACsBpB,EADtB,gCAEjB,CACEuB,OAAQ,CACNC,QAASH,EACTI,KAAM,KANkB,cACxBC,EADwB,yBAUvBA,EAAKC,KAAKC,SAVa,2CAAH,sDAahBC,EAAgB,mCAAG,WAAM1C,GAAN,uFACXiC,EAAAA,EAAAA,IAAA,gBAAmBjC,EAAnB,qBAA0C,CAC3DoC,OAAQ,CACNC,QAASH,KAHiB,cACxBK,EADwB,yBAMvBA,EAAKC,MANkB,2CAAH,sDAShBG,EAAa,mCAAG,WAAM3C,GAAN,uFACRiC,EAAAA,EAAAA,IAAA,gBAAmBjC,EAAnB,4BAAiD,CAClEoC,OAAQ,CACNC,QAASH,KAHc,cACrBK,EADqB,yBAMpBA,EAAKC,KAAKI,MANU,2CAAH,sDASbC,EAAgB,mCAAG,WAAM7C,GAAN,uFACXiC,EAAAA,EAAAA,IAAA,gBAAmBjC,EAAnB,6BAAkD,CACnEoC,OAAQ,CACNC,QAASH,KAHiB,cACxBK,EADwB,yBAMvBA,EAAKC,KAAKC,SANa,2CAAH,qD,uDC9CtB,IAAMjC,EAAe,iC","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx","services/apiService.jsx","services/constants.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from '@emotion/styled'\n\nexport const TrendingList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 8px;\n`;\n\nexport const TrendingItem = styled.li`\n    display: block;\n`\n\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n  color: #000;\n  font-weight: 500;\n  &:hover,\n  &:focus {\n    color: #be7214;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  object-fit: cover;\n  object-position: center;\n  margin-bottom: 5px;\n`;","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { Img, Link, TrendingList,TrendingItem } from './MoviesList.styled';\nimport { BASE_IMG_URL } from 'services/constants';\nimport placeholder from '../../img/placeholder.webp'\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <TrendingList>\n      {movies.map(({ id, title, poster_path, release_date }) => (\n        <TrendingItem key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <Img src={poster_path ? BASE_IMG_URL + poster_path : placeholder}\n              alt={title} />\n            <p>{ title}({release_date.slice(0, 4)})</p>\n          </Link>\n        </TrendingItem>\n      ))}\n    </TrendingList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object.isRequired),\n};","import { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'services/apiService';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const searchQuery = searchParams.get('query');\n    if (!searchQuery) {\n      return;\n    }\n    getMoviesByQuery(searchQuery)\n      .then(setMovies)\n      .finally(() => {\n        setQuery(searchQuery);\n      });\n  }, [searchParams]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    setSearchParams({ query });\n  };\n\n  const handleChange = event => {\n    setQuery(event.target.value);\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" value={query} onChange={handleChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n      <MoviesList movies={movies} />\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '30f8890b4b18c3650777b7120811d941';\n\nexport const getTrandingMovies = async () => {\n  const resp = await axios.get(`/trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n      page: 1,\n    },\n  });\n  return resp.data.results;\n};\n\nexport const getMoviesByQuery = async query => {\n  const resp = await axios.get(\n    `/search/movie?&language=en-US&query=${query}&page=1&include_adult=false `,\n    {\n      params: {\n        api_key: API_KEY,\n        page: 1,\n      },\n    }\n  );\n  return resp.data.results;\n};\n\nexport const getMoviesDetails = async id => {\n  const resp = await axios.get(`movie/${id}?&language=en-US `, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data;\n};\n\nexport const getMoviesCast = async id => {\n  const resp = await axios.get(`movie/${id}/credits?&language=en-US`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data.cast;\n};\n\nexport const getMoviesReviews = async id => {\n  const resp = await axios.get(`movie/${id}/reviews?&language=en-US `, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data.results;\n};\n","export const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w400';\n"],"names":["TrendingList","styled","TrendingItem","Link","NavLink","Img","MoviesList","movies","location","useLocation","map","id","title","poster_path","release_date","to","state","from","src","BASE_IMG_URL","placeholder","alt","slice","useState","query","setQuery","setMovies","useSearchParams","searchParams","setSearchParams","useEffect","searchQuery","get","getMoviesByQuery","then","finally","onSubmit","event","preventDefault","type","name","value","onChange","target","axios","API_KEY","getTrandingMovies","params","api_key","page","resp","data","results","getMoviesDetails","getMoviesCast","cast","getMoviesReviews"],"sourceRoot":""}